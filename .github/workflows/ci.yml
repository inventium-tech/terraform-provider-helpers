name: Continuous Integration

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Go Build
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Go Build
        run: go build -v ./...

  lint:
    name: Linters
    runs-on: ubuntu-latest
    needs: build
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: GolangCI Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          args: --config=.linters/.golangci.yml
      - name: MegaLinter
        uses: oxsecurity/megalinter/flavors/go@v8
        id: ml
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_WORKSPACE: ${{ github.workspace }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive reports
        uses: actions/upload-artifact@v4
        if: ${{ success() || failure() }}
        with:
          name: MegaLinter reports
          path: |
            .ml-reports/
            mega-linter.log

  unit-tests:
    name: Go Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Run Unit Tests
        run: go test ./... -v -coverprofile=unit-tests-report.lcov -json > unit-tests-report.log
      - name: Codecov Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          files: unit-tests-report.lcov
          flags: unit-tests
      - name: Codecov Upload Test Results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: unit-tests-report.log
      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-report-${{ github.sha }}
          path: |
            unit-tests-report.lcov
            unit-tests-report.log
          retention-days: 7
          overwrite: true

  integration-tests:
    name: Go Integration Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        tf-version: ['1.11.*', '1.12.*']
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.tf-version }}
          terraform_wrapper: false
      - name: Run Integration Tests
        run: go test ./internal/provider -v -coverprofile=integration-tests-report.lcov -json > integration-tests-report.log
        env:
          TF_ACC: '1'
      - name: Codecov Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          files: integration-tests-report.lcov
          flags: integration-tests
      - name: Codecov Upload Test Results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: integration-tests-report.log
      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: integration-tests-report-${{ matrix.tf-version }}-${{ github.sha }}
          path: |
            integration-tests-report.lcov
            integration-tests-report.log
          retention-days: 7
          overwrite: true

  sonar:
    name: SonarCloud Scan
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download Unit Test Artifacts
        uses: actions/download-artifact@v4
        with:
          name: unit-tests-report-${{ github.sha }}
          path: unit-tests/
      - name: Download Integration Test Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: integration-tests-report-*-${{ github.sha }}
          path: integration-tests/
          merge-multiple: true
      - name: Sonarqube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codeql:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: build
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:go'
